// Generated by CoffeeScript 1.7.1
(function() {
  var BASIC_PARAMS, FILTER_PARAMS, MAINTENANCE_BASIC_PARAMS, async, cheerio, request, xml2js, _;

  xml2js = require('xml2js');

  request = require('request');

  cheerio = require('cheerio');

  async = require('async');

  _ = require('underscore');

  require('colors');

  FILTER_PARAMS = {
    track: '',
    bidResponse: 'all',
    theType: 'OPEN',
    govType: 'state',
    theAgency: 'all',
    theWord: '',
    theSort: 'BID NUMBER'
  };

  BASIC_PARAMS = {
    title: 'Bid Title',
    contact_name: 'Name',
    contact_phone: 'Phone',
    contact_email: 'E-mail',
    created_at: 'Date Posted',
    updated_at: 'Last Revision Date',
    responses_due_at: 'Bid Due',
    responses_due_at_time: 'Time Due',
    id: 'Bid Number',
    department_name: 'Agency'
  };

  MAINTENANCE_BASIC_PARAMS = {
    title: 'eSource Title',
    description: 'eSource Description',
    contact_name: 'Contact Name',
    contact_phone: 'Contact Phone',
    contact_email: 'Contact Email',
    created_at: 'eSource Released Date',
    department_name: 'Agency'
  };

  module.exports = function(opts, done) {
    var getRfpDetails, rfps;
    rfps = [];
    request.get('http://mission.sfgov.org/OCABidPublication/rss.aspx', function(error, response, body) {
      var parser;
      parser = new xml2js.Parser();
      parser.parseString(body, function(err, result) {
        var items;
        items = result.rss.channel[0].item;
        return _.each(items, function(v, k, list) {
          return rfps.push({
            html_url: v.link[0]
          });
        });
      });
      return console.dir(rfps);

      /*
       * Do some pretty standard DOM-traversal to grab the ID and URL for each RFP.
       * We just need to get this preliminary information -- we'll scrape for the details later.
      $('table').eq(3).find('tr').each (i, el) ->
        return if i == 0
      
        rfps.push {
          id: $(@).find('td').eq(0).find('a').text(),
          html_url: "http://ssl.doas.state.ga.us/PRSapp/#{$(@).find('td').eq(0).find('a').attr('href')}"
        }
      
       * If the user has indicated they want to limit the number of results (via the --limit flag),
       * use Underscore's _.first to make it so.
      if opts.limit > 0
        rfps = _.first(rfps, opts.limit)
      
       * Using the async library, we'll make up to 5 concurrent requests to the procurement site.
       * We call the getRfpDetails() function for each one.
       * Once we're done, we call the done() function that was passed to us back in the `module.exports` definition.
      
      async.eachLimit rfps, 5, getRfpDetails, (err) ->
        console.log(err.red) if err
        done rfps
       */
    });
    return getRfpDetails = function(item, cb) {
      console.dir(item.link);
      request.get(item.link[0], function(err, response, body) {
        var $, $table, k, v, _results;
        $ = cheerio.load(body);
        $table = $('#_ctl0_cp_BODY_CONTENT_BidDetailBody_PANEL_BID_DETAILS');
        _results = [];
        for (k in BASIC_PARAMS) {
          v = BASIC_PARAMS[k];
          item[k] = $table.find("tr:contains(" + v + ")").find('td').eq(1).text();
          _results.push(console.log(v + ' ' + item[k]));
        }
        return _results;
      });
      return cb();

      /*
      return getMaintenanceRfpDetails(item, cb) if item.html_url.match 'maintanence'
      
      request.get item.html_url, (err, response, body) ->
        $ = cheerio.load body
        $table = $('table').eq(1)
      
        for k, v of BASIC_PARAMS
          item[k] = $table.find("tr:contains(#{v})").find('td').eq(3).text()
      
        item.external_url = $table.find('a:contains(Link to Agency Site)').attr('href')
        item.description = $('[name=bidD]').val()
        item.prebid_conferences = []
      
        if $('body').text().match /prebid/i
          $table2 = $('table').eq(2)
      
          item.prebid_conferences.push {
            attendance_mandatory: if $table2.find('tr:contains(Prebid Conference Attendance)').find('td').eq(1).text().match('Mandatory') then true else false
            datetime: $table2.find('tr:contains(Prebid Conference Date/Time)').find('td').eq(1).text()
            address: $table2.find('tr:contains(Prebid Location)').find('td').eq(1).text() + "\n" +
                     $table2.find('tr:contains(Prebid Street)').find('td').eq(1).text() + "\n" +
                     $table2.find('tr:contains(Prebid City)').find('td').eq(1).text() + ", " +
                     $table2.find('tr:contains(Prebid State)').find('td').eq(1).text() + " " +
                     $table2.find('tr:contains(Prebid Zip Code)').find('td').eq(1).text()
          }
      
        item.nigp_codes = []
        $('h2:contains(NIGP codes assigned to bid)').next('table').find('a').each ->
          item.nigp_codes.push $(@).text()
      
        item.downloads = []
        $('h2:contains(Documents)').nextAll().filter( (-> $(@).is('table')) ).eq(0).find('a').each ->
          item.downloads.push $(@).attr('href')
      
        console.log "Successfully downloaded #{item.title}".green
      
        cb()
       */
    };

    /*
     * Maintenance RFPs have a different layout than the other RFPs.
     * See http://ssl.doas.state.ga.us/PRSapp/maintanence?eQHeaderPK=125334&source=publicViewQuote for an example.
    getMaintenanceRfpDetails = (item, cb) ->
      request.get item.html_url, (err, response, body) ->
        $ = cheerio.load body
        $table = $('table').eq(3)
    
        for k, v of MAINTENANCE_BASIC_PARAMS
          item[k] = $table.find("tr:contains(#{v})").find('td').eq(1).text()
    
        item.industry_codes =
          nigp: $table.find("tr:contains(NIGP Code Selection)").find('td').eq(1).text().match(/(\d+)/ig)
    
        cb()
     */
  };

}).call(this);
